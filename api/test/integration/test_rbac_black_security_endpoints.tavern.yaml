---
test_name: GET USERS RBAC

includes:
 - !include common.yaml

marks:
  - usefixtures:
    - security_black_rbac_tests

stages:

  - type: ref
    id: login_get_token

  - name: Get all users in the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: ossec
            - username: rbac
            - username: wazuh
            - username: wazuh-app
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0
        message: All specified users were shown

  - name: Get a specified user by its username (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: ossec
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: ossec
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: All specified users were shown

  - name: Get a specified user by its username (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: administrator
    response:
      status_code: 400
      body: &permission_denied
        code: 4000
        dapi_errors:
          master-node:
            error: Permission denied
        detail: Permission denied
        remediation: !anystr
        status: 400
        title: Wazuh Error
        type: about:blank

  - name: Get a list of users by its username (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: wazuh,ossec,rbac
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: ossec
            - username: rbac
            - username: wazuh
          failed_items: []
          total_affected_items: 3
          total_failed_items: 0
        message: All specified users were shown

  - name: Get a list of users by its username (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: administrator,normal
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Get a list of users by its username (Both)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: normal,python,guest,ossec,wazuh,administrator
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: ossec
            - username: wazuh
          failed_items:
            - error:
                code: 4000
                message: 'Permission denied: Resource type: user:id'
                remediation: Please, make sure you have permissions to execute current request,
                  for more information on setting up permissions please visit XXXX
              id:
                - administrator
                - guest
                - normal
                - python
          total_affected_items: 2
          total_failed_items: 4
        message: Some users could not be shown

---
test_name: GET ROLES RBAC

stages:

  - name: Get all roles in the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0
        message: No role were shown

  - name: Get a specified role by its id (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        role_ids: 1
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: GET POLICIES RBAC

stages:

  - name: Get all policies in the system (All denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 1
              name: wazuhPolicy
              policy:
                actions:
                  - "*:*"
                effect: allow
                resources:
                  - "*:*"
              roles:
                - id: 1
                  name: wazuh
                  rule:
                    FIND:
                      r'^auth[a-zA-Z]+$':
                        - administrator
                - id: 2
                  name: wazuh-app
                  rule:
                    FIND:
                      r'^auth[a-zA-Z]+$':
                        - administrator-app
                - id: 3
                  name: technical
                  rule:
                    MATCH:
                      definition: technicalRule
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
            - id: 2
              name: wazuh-appPolicy
              policy:
                actions:
                  - agent:create
                effect: allow
                resources:
                  - agent:id:001
                  - agent:id:002
                  - agent:id:003
              roles:
                - id: 3
                  name: technical
                  rule:
                    MATCH:
                      definition: technicalRule
                - id: 5
                  name: normalUser
                  rule:
                    MATCH:
                      definition: normalRule
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
            - id: 3
              name: technicalPolicy
              policy:
                actions:
                  - agent:create
                effect: allow
                resources:
                  - "*:*:*"
              roles:
                - id: 5
                  name: normalUser
                  rule:
                    MATCH:
                      definition: normalRule
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
            - id: 4
              name: administratorPolicy
              policy:
                actions:
                  - agent:update
                  - agent:delete
                effect: allow
                resources:
                  - agent:id:*
              roles:
                - id: 4
                  name: administrator
                  rule:
                    MATCH:
                      definition: administratorRule
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
            - id: 5
              name: normalPolicy
              policy:
                actions:
                  - agent:update
                  - agent:delete
                effect: deny
                resources:
                  - agent:id:*
              roles:
                - id: 3
                  name: technical
                  rule:
                    MATCH:
                      definition: technicalRule
                - id: 4
                  name: administrator
                  rule:
                    MATCH:
                      definition: administratorRule
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
            - id: 6
              name: ossecPolicy
              policy:
                actions:
                  - role:read
                effect: allow
                resources:
                  - role:id:*
              roles:
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
            - id: 7
              name: policy1
              policy:
                actions:
                  - role:read
                effect: deny
                resources:
                  - role:id:*
              roles:
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
            - id: 8
              name: policy2
              policy:
                actions:
                  - role:read
                effect: allow
                resources:
                  - role:id:1
              roles:
                - id: 3
                  name: technical
                  rule:
                    MATCH:
                      definition: technicalRule
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
            - id: 9
              name: policy3
              policy:
                actions:
                  - policy:read
                effect: allow
                resources:
                  - policy:id:1
              roles:
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
            - id: 10
              name: policy4
              policy:
                actions:
                  - policy:delete
                effect: deny
                resources:
                  - policy:id:*
              roles:
                - id: 5
                  name: normalUser
                  rule:
                    MATCH:
                      definition: normalRule
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
          failed_items: []
          total_affected_items: 10
          total_failed_items: 0
        message: All specified policies were shown


  - name: Get a specified policy by its id (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        policy_ids: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 1
              name: wazuhPolicy
              policy:
                actions:
                  - "*:*"
                effect: allow
                resources:
                  - "*:*"
              roles:
                - id: 1
                  name: wazuh
                  rule:
                    FIND:
                      r'^auth[a-zA-Z]+$':
                        - administrator
                - id: 2
                  name: wazuh-app
                  rule:
                    FIND:
                      r'^auth[a-zA-Z]+$':
                        - administrator-app
                - id: 3
                  name: technical
                  rule:
                    MATCH:
                      definition: technicalRule
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: All specified policies were shown

  - name: Get a specified policy by its id (It doesn't exist but we have all the permissions on the resource policies)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        policy_ids: 99
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4007
                message: The specified policy does not exist
                remediation: Please, create the specified policy with the endpoint POST /security/policies
              id:
                - '99'
          total_affected_items: 0
          total_failed_items: 1
        message: No policy were shown

  - name: Get a list of policies by its id (Existent and no existent)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        policy_ids: 1,2,99
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 1
              name: wazuhPolicy
              policy:
                actions:
                  - "*:*"
                effect: allow
                resources:
                  - "*:*"
              roles:
                - id: 1
                  name: wazuh
                  rule:
                    FIND:
                      r'^auth[a-zA-Z]+$':
                        - administrator
                - id: 2
                  name: wazuh-app
                  rule:
                    FIND:
                      r'^auth[a-zA-Z]+$':
                        - administrator-app
                - id: 3
                  name: technical
                  rule:
                    MATCH:
                      definition: technicalRule
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
            - id: 2
              name: wazuh-appPolicy
              policy:
                actions:
                  - agent:create
                effect: allow
                resources:
                  - agent:id:001
                  - agent:id:002
                  - agent:id:003
              roles:
                - id: 3
                  name: technical
                  rule:
                    MATCH:
                      definition: technicalRule
                - id: 5
                  name: normalUser
                  rule:
                    MATCH:
                      definition: normalRule
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
          failed_items:
            - error:
                code: 4007
                message: The specified policy does not exist
                remediation: Please, create the specified policy with the endpoint POST /security/policies
              id:
                - '99'
          total_affected_items: 2
          total_failed_items: 1
        message: Some policies could not be shown

---
test_name: UPDATE USERS RBAC

stages:

  - name: Update one specified user in the system (All allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users/guest"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        password: stringA1!
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: guest
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: User modified correctly

  - name: Update one specified user in the system (All allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users/wazuh"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        password: stringA1!
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: wazuh
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: User modified correctly

---
test_name: UPDATE ROLES RBAC

stages:

  - name: Update one specified role in the system (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/5"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: normalUserModified
        rule:
          FIND$:
            definition: normalUserRuleModified
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 5
              name: normalUserModified
              policies:
                - id: 2
                  name: wazuh-appPolicy
                  policy:
                    actions:
                      - agent:create
                    effect: allow
                    resources:
                      - agent:id:001
                      - agent:id:002
                      - agent:id:003
                - id: 3
                  name: technicalPolicy
                  policy:
                    actions:
                      - agent:create
                    effect: allow
                    resources:
                      - "*:*:*"
                - id: 10
                  name: policy4
                  policy:
                    actions:
                      - policy:delete
                    effect: deny
                    resources:
                      - policy:id:*
              rule:
                FIND$:
                  definition: normalUserRuleModified
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: Role updated correctly

  - name: Update one specified role in the system (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/4"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: wazuh-appModified
        rule:
          FIND$:
            definition: wazuh-appRuleModified
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Update one admin role in the system (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/1"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: wazuhModified
        rule:
          FIND$:
            definition: wazuhRuleModified
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4008
                message: The specified role/policy is required for a correct Wazuh's functionality
                remediation: !anything
              id:
                - 1
          total_affected_items: 0
          total_failed_items: 1
        message: Role could not be updated

---
test_name: UPDATE POLICIES RBAC

stages:

  - name: Update one specified policy in the system (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies/4"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: administratorPolicyModified
        policy:
          actions:
            - agent:read
          effect: deny
          resources:
            - agent:id:097
            - agent:id:002
            - agent:id:003
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 4
              name: administratorPolicyModified
              policy:
                actions:
                  - agent:read
                effect: deny
                resources:
                  - agent:id:097
                  - agent:id:002
                  - agent:id:003
              roles:
                - id: 4
                  name: administrator
                  rule:
                    MATCH:
                      definition: administratorRule
                - id: 6
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: Policy updated correctly

  - name: Update one specified policy in the system (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies/5"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: normalPolicyModified
        policy:
          actions:
            - agent:read
          effect: allow
          resources:
            - agent:id:096
            - agent:id:002
            - agent:id:003
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: CREATE LINK ROLE-POLICIES RBAC

stages:

  - name: Create one specified link between one role and a list of policies (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/5/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        policy_ids: 5,6,7
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - '7'
            - '6'
          failed_items:
            - error:
                code: 4000
                message: 'Permission denied: Resource type: policy:id'
                remediation: Please, make sure you have permissions to execute current request,
                  for more information on setting up permissions please visit XXXX
              id:
                - '5'
          total_affected_items: 2
          total_failed_items: 1
        message: Some policies could not be linked to role 5

---
test_name: DELETE LINK ROLE-POLICIES RBAC

stages:

  - name: Delete one specified link between one role and a list of policies (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/5/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        policy_ids: 5,6,7
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - '7'
            - '6'
          failed_items:
            - error:
                code: 4010
                message: The specified role-policy does not exist
                remediation: !anystr
              id:
                - '5'
          total_affected_items: 2
          total_failed_items: 1
        message: Some policies could not be unlinked from role 5

---
test_name: DELETE USERS RBAC

stages:

  - name: Delete one specified user in the system (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        usernames: administrator
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: administrator
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: Users deleted correctly

  - name: Delete all allowed user in the system (All)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: python
            - username: ossec
            - username: rbac
          failed_items: []
          total_affected_items: 3
          total_failed_items: 0
        message: Users deleted correctly

  - name: Delete all allowed user in the system (All)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0
        message: No user was deleted

  - name: Delete a list of users in the system (Allow and deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        usernames: wazuh,administrator,guest
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4000
                message: 'Permission denied: Resource type: user:id'
                remediation: Please, make sure you have permissions to execute current request,
                  for more information on setting up permissions please visit XXXX
              id:
                - administrator
                - guest
            - error:
                code: 5004
                message: The user could not be removed or updated
                remediation: Administrator users can not be removed or updated
              id:
                - wazuh
          total_affected_items: 0
          total_failed_items: 3
        message: No user was deleted

---
test_name: DELETE ROLES RBAC

stages:

  - name: Delete one specified role in the system (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        role_ids: 4
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 4
              name: administrator
              policies: []
              rule:
                MATCH:
                  definition: administratorRule
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: All specified roles were deleted

  - name: Delete all roles in the system (Allow and deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 6
              name: ossec
              policies: []
              rule:
                MATCH:
                  definition: ossecRule
            - id: 3
              name: technical
              policies: []
              rule:
                MATCH:
                  definition: technicalRule
            - id: 5
              name: normalUserModified
              policies: []
              rule:
                FIND$:
                  definition: normalUserRuleModified
          failed_items: []
          total_affected_items: 3
          total_failed_items: 0
        message: All specified roles were deleted

---
test_name: DELETE POLICIES RBAC

stages:

  - name: Delete one specified policy in the system (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        policy_ids: 4
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 4
              name: administratorPolicyModified
              policy:
                actions:
                  - agent:read
                effect: deny
                resources:
                  - agent:id:097
                  - agent:id:002
                  - agent:id:003
              roles: []
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: All specified policies were deleted

  - name: Delete all policies in the system (Allow and deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 6
              name: ossecPolicy
              policy:
                actions:
                  - role:read
                effect: allow
                resources:
                  - role:id:*
              roles: []
            - id: 10
              name: policy4
              policy:
                actions:
                  - policy:delete
                effect: deny
                resources:
                  - policy:id:*
              roles: []
            - id: 3
              name: technicalPolicy
              policy:
                actions:
                  - agent:create
                effect: allow
                resources:
                  - "*:*:*"
              roles: []
            - id: 7
              name: policy1
              policy:
                actions:
                  - role:read
                effect: deny
                resources:
                  - role:id:*
              roles: []
            - id: 9
              name: policy3
              policy:
                actions:
                  - policy:read
                effect: allow
                resources:
                  - policy:id:1
              roles: []
            - id: 8
              name: policy2
              policy:
                actions:
                  - role:read
                effect: allow
                resources:
                  - role:id:1
              roles: []
            - id: 2
              name: wazuh-appPolicy
              policy:
                actions:
                  - agent:create
                effect: allow
                resources:
                  - agent:id:001
                  - agent:id:002
                  - agent:id:003
              roles: []
            - id: 5
              name: normalPolicy
              policy:
                actions:
                  - agent:update
                  - agent:delete
                effect: deny
                resources:
                  - agent:id:*
              roles: []
          failed_items: []
          total_affected_items: 8
          total_failed_items: 0
        message: All specified policies were deleted

---
test_name: CREATE USERS RBAC

stages:

  - name: Create one specified user (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        username: newUser
        password: stringA1!
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: newUser
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: User created correctly

---
test_name: CREATE ROLES AND POLICIES RBAC

stages:

  - name: Create one specified role (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: newUserRole
        rule:
          FIND$:
            definition: newUser
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Create one specified policy (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: newUserPolicy
        policy:
          actions:
            - security:delete
          effect: allow
          resources:
            - role:id:*
            - policy:id:*
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: REVOKE TOKENS RBAC

stages:

  - name: Revoke all tokens (Allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/user/revoke"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
    response:
      status_code: 200

  - name: Revoke all tokens (Invalid token after previous call)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/user/revoke"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
    response:
      status_code: 401
